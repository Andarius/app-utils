version: 2.1

orbs:
  gh: circleci/github-cli@1.0
  sre: tracktor/ci-tools@0.1.5

references:
  deploy_context: &deploy_context
    - github

executors:

  test-build:
    docker:
      - image: cimg/python:3.10-browsers

  build-docker:
    docker:
      - image: cimg/base:current

jobs:

  run-tests:
    executor: test-build
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}
      - run:
          name: Install python dependencies
          command: poetry install
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
      - run:
          name: Running type checking
          command: poetry run pyright
      - run:
          name: Run tests
          command: |
            poetry run pytest -vv --junitxml=tests/junit.xml
      - run:
          name: Generating coverage
          command: |
            poetry run coverage xml -o tests/coverage.xml
            poetry run coverage html
      - store_test_results:
          path: tests
      - store_artifacts:
          path: htmlcov

  bump-version:
    executor: test-build
    steps:
      - gh/setup
      - checkout
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}
      - run:
          name: Adding github.com to known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Create release
          command: bash .circleci/scripts/release.sh
      - store_artifacts:
          path: dist
      - save_cache:
          name: Saving wheel
          key: proj-{{ checksum "pyproject.toml" }}
          paths:
            - dist/

  build-docker:
    executor: build-docker
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - sre/load-poetry-version
      - sre/build-docker:
          image_name: 'andarius/track-utils'
          version: ${VERSION}
          latest_version: 'latest'
          registry_pwd: $DOCKER_PWD
          registry_user: $DOCKER_USER
          build_params: "--build-arg version=${VERSION}"
          publish: true


workflows:

  tests-deploy:
    jobs:
      - run-tests:
          filters:
            tags:
              ignore: /.*/
      - bump-version:
          requires: [ run-tests ]
          context: *deploy_context
          filters:
            tags:
              only: /.*/
            branches:
              only: /^master$/
  publish:
    jobs:
      - build-docker:
          context: *deploy_context
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
